import { Entity } from '../../../../types';
import { prop } from '../../../define';
import { throwErrorIfNotUniqueOnAnything } from './throwErrorIfNotUniqueOnAnything';

describe('throwErrorIfNotUniqueOnAnything', () => {
  it('should throw an error if entity.unique is empty', () => {
    const user = new Entity({
      name: 'user',
      properties: {
        phone_number: prop.VARCHAR(255),
        first_name: prop.VARCHAR(255),
        last_name: prop.VARCHAR(255),
      },
      unique: [], // note the misspelling
    });
    try {
      throwErrorIfNotUniqueOnAnything({ entity: user });
      throw new Error('should not reach here');
    } catch (error) {
      expect(error.message).toEqual(
        "Entity 'user' must be unique on atleast one property. If it is not unique on any natural keys, you can make it unique on the autogenerated 'uuid' property instead.",
      );
    }
  });
});
