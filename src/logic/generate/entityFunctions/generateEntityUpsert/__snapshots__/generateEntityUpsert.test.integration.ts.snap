// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateEntityUpsert entity that references another entity by version should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_crash_report(
  in_location_id bigint,
  in_vehicle_version_id bigint
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM crash_report
    WHERE 1=1
      AND (location_id = in_location_id)
      AND (vehicle_version_id = in_vehicle_version_id);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO crash_report
        (uuid, created_at, location_id, vehicle_version_id)
        VALUES
        (uuid_generate_v4(), v_created_at, in_location_id, in_vehicle_version_id)
        RETURNING id INTO v_static_id; 
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;

exports[`generateEntityUpsert entity with array properties should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_movie(
  in_name varchar,
  in_producer_ids bigint[],
  in_language_ids bigint[]
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
    v_matching_version_id bigint;
    v_effective_at timestamptz := v_created_at; -- i.e., effective \\"now\\"
    v_current_version_id_recorded_in_pointer_table bigint;
    v_effective_at_of_current_version_recorded_in_pointer_table timestamptz;
    v_array_access_index int;
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM movie
    WHERE 1=1
      AND (name = in_name)
      AND (producer_ids_hash = digest(array_to_string(in_producer_ids, ',', '__NULL__'), 'sha256'));
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO movie
        (uuid, created_at, name, producer_ids_hash)
        VALUES
        (uuid_generate_v4(), v_created_at, in_name, digest(array_to_string(in_producer_ids, ',', '__NULL__'), 'sha256'))
        RETURNING id INTO v_static_id; 

      -- insert a row into the mapping table for each value in array in_producer_ids
      FOR v_array_access_index IN 1 .. coalesce(array_upper(in_producer_ids, 1), 0)
      LOOP
        INSERT INTO movie_to_producer
          (created_at, movie_id, producer_id, array_order_index)
          VALUES
          (v_created_at, v_static_id, in_producer_ids[v_array_access_index], v_array_access_index);
      END LOOP;
    END IF;

    -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
    SELECT id INTO v_matching_version_id -- see if latest version already has this data
    FROM movie_version
    WHERE 1=1
      AND movie_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the version effective at the time of \\"v_effective_at\\"
        SELECT MAX(effective_at)
        FROM movie_version ssv
        WHERE ssv.movie_id = v_static_id
          AND effective_at <= v_effective_at
      )
      AND (language_ids_hash = digest(array_to_string(in_language_ids, ',', '__NULL__'), 'sha256'));
    IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
      INSERT INTO movie_version
        (movie_id, created_at, effective_at, language_ids_hash)
        VALUES
        (v_static_id, v_created_at, v_effective_at, digest(array_to_string(in_language_ids, ',', '__NULL__'), 'sha256'))
        RETURNING id INTO v_matching_version_id; 

      -- insert a row into the mapping table for each value in array in_language_ids
      FOR v_array_access_index IN 1 .. coalesce(array_upper(in_language_ids, 1), 0)
      LOOP
        INSERT INTO movie_version_to_language
          (created_at, movie_version_id, language_id, array_order_index)
          VALUES
          (v_created_at, v_matching_version_id, in_language_ids[v_array_access_index], v_array_access_index);
      END LOOP;
    END IF;

    -- update the current version pointer table, if it is not already up to date
    SELECT movie_version_id INTO v_current_version_id_recorded_in_pointer_table  -- get the version recorded as current for the entity, if any
    FROM movie_cvp
    WHERE 1=1
      AND movie_id = v_static_id; -- for this entity
    IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
      INSERT INTO movie_cvp
        (updated_at, movie_id, movie_version_id)
        VALUES
        (v_created_at, v_static_id, v_matching_version_id);
      v_current_version_id_recorded_in_pointer_table := v_matching_version_id; -- and record that the current version recorded is now the real current version
    END IF;
    IF (v_current_version_id_recorded_in_pointer_table <> v_matching_version_id) THEN -- if they are not exactly equal, try to update the current version recorded in the pointer table
      SELECT effective_at INTO v_effective_at_of_current_version_recorded_in_pointer_table  -- grab the effective_at value of the recorded current version
      FROM movie_version
      WHERE id = v_current_version_id_recorded_in_pointer_table;
      IF (v_effective_at_of_current_version_recorded_in_pointer_table < v_effective_at) THEN -- update cached current version only if the version we just inserted is \\"newer\\" than the currently cached version
        UPDATE movie_cvp
        SET
          movie_version_id = v_matching_version_id,
          updated_at = v_created_at
        WHERE
          movie_id = v_static_id;
      END IF;
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;

exports[`generateEntityUpsert fully versioned entity unique on uuid should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_webstore(
  in_uuid uuid,
  in_name varchar,
  in_phone_number varchar,
  in_email varchar,
  in_logo_url varchar
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
    v_matching_version_id bigint;
    v_effective_at timestamptz := v_created_at; -- i.e., effective \\"now\\"
    v_current_version_id_recorded_in_pointer_table bigint;
    v_effective_at_of_current_version_recorded_in_pointer_table timestamptz;
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM webstore
    WHERE 1=1
      AND (uuid = in_uuid);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO webstore
        (uuid, created_at)
        VALUES
        (in_uuid, v_created_at)
        RETURNING id INTO v_static_id; 
    END IF;

    -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
    SELECT id INTO v_matching_version_id -- see if latest version already has this data
    FROM webstore_version
    WHERE 1=1
      AND webstore_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the version effective at the time of \\"v_effective_at\\"
        SELECT MAX(effective_at)
        FROM webstore_version ssv
        WHERE ssv.webstore_id = v_static_id
          AND effective_at <= v_effective_at
      )
      AND (name = in_name)
      AND (phone_number = in_phone_number)
      AND (email = in_email)
      AND (logo_url = in_logo_url);
    IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
      INSERT INTO webstore_version
        (webstore_id, created_at, effective_at, name, phone_number, email, logo_url)
        VALUES
        (v_static_id, v_created_at, v_effective_at, in_name, in_phone_number, in_email, in_logo_url)
        RETURNING id INTO v_matching_version_id; 
    END IF;

    -- update the current version pointer table, if it is not already up to date
    SELECT webstore_version_id INTO v_current_version_id_recorded_in_pointer_table  -- get the version recorded as current for the entity, if any
    FROM webstore_cvp
    WHERE 1=1
      AND webstore_id = v_static_id; -- for this entity
    IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
      INSERT INTO webstore_cvp
        (updated_at, webstore_id, webstore_version_id)
        VALUES
        (v_created_at, v_static_id, v_matching_version_id);
      v_current_version_id_recorded_in_pointer_table := v_matching_version_id; -- and record that the current version recorded is now the real current version
    END IF;
    IF (v_current_version_id_recorded_in_pointer_table <> v_matching_version_id) THEN -- if they are not exactly equal, try to update the current version recorded in the pointer table
      SELECT effective_at INTO v_effective_at_of_current_version_recorded_in_pointer_table  -- grab the effective_at value of the recorded current version
      FROM webstore_version
      WHERE id = v_current_version_id_recorded_in_pointer_table;
      IF (v_effective_at_of_current_version_recorded_in_pointer_table < v_effective_at) THEN -- update cached current version only if the version we just inserted is \\"newer\\" than the currently cached version
        UPDATE webstore_cvp
        SET
          webstore_version_id = v_matching_version_id,
          updated_at = v_created_at
        WHERE
          webstore_id = v_static_id;
      END IF;
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;

exports[`generateEntityUpsert static entity should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_address_2(
  in_street varchar,
  in_suite varchar,
  in_city varchar,
  in_country varchar,
  in_weekday_found varchar
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM address_2
    WHERE 1=1
      AND (street = in_street)
      AND (suite = in_suite OR (suite IS null AND in_suite IS null))
      AND (city = in_city)
      AND (country = in_country);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO address_2
        (uuid, created_at, street, suite, city, country, weekday_found)
        VALUES
        (uuid_generate_v4(), v_created_at, in_street, in_suite, in_city, in_country, in_weekday_found)
        RETURNING id INTO v_static_id; 
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;

exports[`generateEntityUpsert static entity unique on uuid should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_plant_order(
  in_uuid uuid,
  in_customer_id bigint,
  in_plant_name varchar,
  in_quantity int
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM plant_order
    WHERE 1=1
      AND (uuid = in_uuid);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO plant_order
        (uuid, created_at, customer_id, plant_name, quantity)
        VALUES
        (in_uuid, v_created_at, in_customer_id, in_plant_name, in_quantity)
        RETURNING id INTO v_static_id; 
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;

exports[`generateEntityUpsert versioned entity should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION upsert_alternative_user(
  in_cognito_uuid uuid,
  in_name varchar(255),
  in_bio text
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
    v_matching_version_id bigint;
    v_effective_at timestamptz := v_created_at; -- i.e., effective \\"now\\"
    v_current_version_id_recorded_in_pointer_table bigint;
    v_effective_at_of_current_version_recorded_in_pointer_table timestamptz;
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM alternative_user
    WHERE 1=1
      AND (cognito_uuid = in_cognito_uuid);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO alternative_user
        (uuid, created_at, cognito_uuid)
        VALUES
        (uuid_generate_v4(), v_created_at, in_cognito_uuid)
        RETURNING id INTO v_static_id; 
    END IF;

    -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
    SELECT id INTO v_matching_version_id -- see if latest version already has this data
    FROM alternative_user_version
    WHERE 1=1
      AND alternative_user_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the version effective at the time of \\"v_effective_at\\"
        SELECT MAX(effective_at)
        FROM alternative_user_version ssv
        WHERE ssv.alternative_user_id = v_static_id
          AND effective_at <= v_effective_at
      )
      AND (name = in_name)
      AND (bio = in_bio OR (bio IS null AND in_bio IS null));
    IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
      INSERT INTO alternative_user_version
        (alternative_user_id, created_at, effective_at, name, bio)
        VALUES
        (v_static_id, v_created_at, v_effective_at, in_name, in_bio)
        RETURNING id INTO v_matching_version_id; 
    END IF;

    -- update the current version pointer table, if it is not already up to date
    SELECT alternative_user_version_id INTO v_current_version_id_recorded_in_pointer_table  -- get the version recorded as current for the entity, if any
    FROM alternative_user_cvp
    WHERE 1=1
      AND alternative_user_id = v_static_id; -- for this entity
    IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
      INSERT INTO alternative_user_cvp
        (updated_at, alternative_user_id, alternative_user_version_id)
        VALUES
        (v_created_at, v_static_id, v_matching_version_id);
      v_current_version_id_recorded_in_pointer_table := v_matching_version_id; -- and record that the current version recorded is now the real current version
    END IF;
    IF (v_current_version_id_recorded_in_pointer_table <> v_matching_version_id) THEN -- if they are not exactly equal, try to update the current version recorded in the pointer table
      SELECT effective_at INTO v_effective_at_of_current_version_recorded_in_pointer_table  -- grab the effective_at value of the recorded current version
      FROM alternative_user_version
      WHERE id = v_current_version_id_recorded_in_pointer_table;
      IF (v_effective_at_of_current_version_recorded_in_pointer_table < v_effective_at) THEN -- update cached current version only if the version we just inserted is \\"newer\\" than the currently cached version
        UPDATE alternative_user_cvp
        SET
          alternative_user_version_id = v_matching_version_id,
          updated_at = v_created_at
        WHERE
          alternative_user_id = v_static_id;
      END IF;
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$"
`;
