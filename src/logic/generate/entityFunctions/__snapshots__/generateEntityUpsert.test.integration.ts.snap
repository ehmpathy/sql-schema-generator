// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateEntityUpsert static entity should create the entity accurately 1`] = `
"CREATE FUNCTION \`upsert_alternative_address\`(
  in_street varchar(255),
  in_suite varchar(255),
  in_city varchar(255),
  in_country enum('US','CA','MX'),
  in_weekday_found varchar(15)
) RETURNS bigint(20)
BEGIN
  -- declarations
  DECLARE v_static_id BIGINT;
  DECLARE v_matching_version_id BIGINT;
  DECLARE v_current_version_id BIGINT;
  DECLARE v_current_version_id_recorded_in_pointer_table BIGINT;

  -- find or create the static entity
  SET v_static_id = (
    SELECT id
    FROM alternative_address
    WHERE 1=1
      AND (street = BINARY in_street)
      AND (suite = BINARY in_suite OR (suite IS null AND in_suite IS null))
      AND (city = BINARY in_city)
      AND (country = BINARY in_country)
  );
  IF (v_static_id IS NULL) THEN -- if entity could not be found originally, create the static entity
    INSERT INTO alternative_address
      (uuid, street, suite, city, country, weekday_found)
      VALUES
      (uuid(), in_street, in_suite, in_city, in_country, in_weekday_found);
    SET v_static_id = (
      SELECT id
      FROM alternative_address
      WHERE 1=1
        AND (street = BINARY in_street)
        AND (suite = BINARY in_suite OR (suite IS null AND in_suite IS null))
        AND (city = BINARY in_city)
        AND (country = BINARY in_country)
    );
  END IF;

  -- return the static entity id
  return v_static_id;
END"
`;

exports[`generateEntityUpsert versioned entity should create the entity accurately 1`] = `
"CREATE FUNCTION \`upsert_alternative_user\`(
  in_cognito_uuid char(36),
  in_name varchar(255),
  in_bio text
) RETURNS bigint(20)
BEGIN
  -- declarations
  DECLARE v_static_id BIGINT;
  DECLARE v_matching_version_id BIGINT;
  DECLARE v_current_version_id BIGINT;
  DECLARE v_current_version_id_recorded_in_pointer_table BIGINT;

  -- find or create the static entity
  SET v_static_id = (
    SELECT id
    FROM alternative_user
    WHERE 1=1
      AND (cognito_uuid = BINARY in_cognito_uuid)
  );
  IF (v_static_id IS NULL) THEN -- if entity could not be found originally, create the static entity
    INSERT INTO alternative_user
      (uuid, cognito_uuid)
      VALUES
      (uuid(), in_cognito_uuid);
    SET v_static_id = (
      SELECT id
      FROM alternative_user
      WHERE 1=1
        AND (cognito_uuid = BINARY in_cognito_uuid)
    );
  END IF;

  -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
  SET v_matching_version_id = ( -- see if latest version already has this data
    SELECT id
    FROM alternative_user_version
    WHERE 1=1
      AND alternative_user_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the currently effective version
        SELECT MAX(effective_at)
        FROM alternative_user_version ssv
        WHERE ssv.alternative_user_id = v_static_id
      )
      AND (name = BINARY in_name)
      AND (bio = BINARY in_bio OR (bio IS null AND in_bio IS null))
  );
  IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
    INSERT INTO alternative_user_version
      (alternative_user_id, name, bio)
      VALUES
      (v_static_id, in_name, in_bio);
  END IF;

  -- update the current version pointer table, if it is not already up to date
  SET v_current_version_id = ( -- get the current version id
    SELECT id
    FROM alternative_user_version
    WHERE 1=1
      AND alternative_user_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the currently effective version
        SELECT MAX(effective_at)
        FROM alternative_user_version ssv
        WHERE ssv.alternative_user_id = v_static_id
      )
  );
  SET v_current_version_id_recorded_in_pointer_table = ( -- get the version recorded as current for the entity, if any
    SELECT alternative_user_version_id
    FROM alternative_user_cvp
    WHERE 1=1
      AND alternative_user_id = v_static_id -- for this entity
  );
  IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
    INSERT INTO alternative_user_cvp
      (alternative_user_id, alternative_user_version_id)
      VALUES
      (v_static_id, v_current_version_id);
    SET v_current_version_id_recorded_in_pointer_table = v_current_version_id; -- and record that the current version recorded is now the real current version
  END IF;
  IF (v_current_version_id_recorded_in_pointer_table <> v_current_version_id) THEN -- if they are not exactly equal, update the current version recorded in the pointer tabe
    UPDATE alternative_user_cvp
    SET
      alternative_user_version_id = v_current_version_id,
      updated_at = NOW(6)
    WHERE
    alternative_user_id = v_static_id;
  END IF;

  -- return the static entity id
  return v_static_id;
END"
`;
