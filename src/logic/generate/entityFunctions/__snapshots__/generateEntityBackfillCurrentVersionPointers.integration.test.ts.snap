// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateEntityBackfillCurrentVersionPointers versioned entity should produce the same syntax as the SHOW CREATE FUNCTION query 1`] = `
"CREATE OR REPLACE FUNCTION backfill_car_cvp(
  in_limit int
)
RETURNS int
LANGUAGE plpgsql
AS $$
  DECLARE
    v_cvp_rows_inserted int;
    v_cvp_rows_updated int;
    v_remaining_limit int;
  BEGIN
    -- 1. insert every time cvp dne for an entity
    INSERT INTO car_cvp
      (car_id, car_version_id)
    SELECT
      e.id,
      e_to_cv.current_version_id
    FROM car e
    JOIN (
      SELECT
        e.id as id,
        v.id as current_version_id
      FROM car e
      JOIN car_version v ON v.car_id = e.id
      WHERE 1=1
        AND effective_at = ( -- and is the currently effective version
          SELECT MAX(effective_at)
          FROM car_version ssv
          WHERE ssv.car_id = e.id -- for same entity
        )
    ) AS e_to_cv ON e_to_cv.id = e.id
    WHERE 1=1
      AND NOT EXISTS (
        SELECT 'x'
        FROM car_cvp cvp
        WHERE cvp.car_id = e.id
      )
    LIMIT in_limit;
    GET DIAGNOSTICS v_cvp_rows_inserted = ROW_COUNT;
    v_remaining_limit := in_limit - v_cvp_rows_inserted;

    -- 2. update every time cvp exists but is out of sync for an entity
    WITH cvp_to_update AS (
      SELECT
        cvp.id,
        e_to_cv.current_version_id as actual_current_version_id
      FROM (
        SELECT
        e.id as id,
        v.id as current_version_id
      FROM car e
      JOIN car_version v ON v.car_id = e.id
      WHERE 1=1
        AND effective_at = ( -- and is the currently effective version
          SELECT MAX(effective_at)
          FROM car_version ssv
          WHERE ssv.car_id = e.id -- for same entity
        )
      ) AS e_to_cv
      JOIN car_cvp cvp ON cvp.car_id = e_to_cv.id
      WHERE cvp.car_version_id <> e_to_cv.current_version_id
      LIMIT v_remaining_limit
    )
    UPDATE car_cvp
    SET
      updated_at = now(),
      car_version_id = cvp_to_update.actual_current_version_id
    FROM cvp_to_update
    WHERE car_cvp.id = cvp_to_update.id;
    GET DIAGNOSTICS v_cvp_rows_updated = ROW_COUNT;

    -- return the number of rows affected
    RETURN v_cvp_rows_inserted + v_cvp_rows_updated;
  END;
$$"
`;
